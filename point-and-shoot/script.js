const canvas = document.getElementById("canvas1");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Counter
let timeToNextRaven = 0;
// Milliseconds per raven release
let ravenInterval = 500;
// Keeps track of previous time
let lastTime = 0;

let ravens = [];
class Raven {
  constructor() {
    this.spriteWidth = 271;
    this.spriteHeight = 194;
    this.sizeModifier = Math.random() * 0.6 + 0.4;
    this.width = this.spriteWidth * this.sizeModifier;
    this.height = this.spriteHeight * this.sizeModifier;
    this.x = canvas.width;
    this.y = Math.random() * (canvas.height - this.height);
    // Horizontal speed (basically)
    this.directionX = Math.random() * 5 + 3;
    // Up and down movement between -2.5 and 2.5
    this.directionY = Math.random() * 5 - 2.5;
    this.markedForDeletion = false;
    this.image = new Image();
    this.image.src = "./assets/raven.png";
  }
  update() {
    this.x -= this.directionX;
    if (this.x < 0 - this.width) this.markedForDeletion = true;
  }
  draw() {
    ctx.drawImage(
      this.image,
      0,
      0,
      this.spriteWidth,
      this.spriteHeight,
      this.x,
      this.y,
      this.width,
      this.height
    );
  }
}

// Timestamp is automatically generated by JavaScript
function animate(timestamp) {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  let deltatime = timestamp - lastTime;
  lastTime = timestamp;
  timeToNextRaven += deltatime;
  // Creates a new raven and resets the count
  if (timeToNextRaven > ravenInterval) {
    ravens.push(new Raven());
    timeToNextRaven = 0;
  }
  // Array literal is used by only having an array
  [...ravens].forEach((raven) => raven.update());
  [...ravens].forEach((raven) => raven.draw());
  // Only keeps ravens that are not marked for deletion
  ravens = ravens.filter((raven) => raven.markedForDeletion === false);
  requestAnimationFrame(animate);
}
// Without a starting timestamp value, it is NaN
animate(0);
